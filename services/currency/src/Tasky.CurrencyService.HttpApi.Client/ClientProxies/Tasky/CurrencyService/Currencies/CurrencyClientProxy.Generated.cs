// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Tasky.CurrencyService.Currencies;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.Authentication;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Client.Proxying;
using Volo.Abp.Http.Modeling;
using Volo.Abp.Reflection;

// ReSharper disable once CheckNamespace
namespace Tasky.CurrencyService.Currencies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ICurrencyAppService), typeof(CurrencyClientProxy))]
public partial class CurrencyClientProxy : ClientProxyBase<ICurrencyAppService>, ICurrencyAppService
{
    public virtual async Task<CurrencyDto> GetAsync(Guid id)
    {
        return await RequestAsync<CurrencyDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<CurrencyDto>> GetListAsync(CurrencyPagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<CurrencyDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CurrencyPagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<CurrencyDto> CreateAsync(CreateUpdateCurrencyDto input)
    {
        return await RequestAsync<CurrencyDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateUpdateCurrencyDto), input }
        });
    }

    public virtual async Task<CurrencyDto> UpdateAsync(Guid id, CreateUpdateCurrencyDto input)
    {
        return await RequestAsync<CurrencyDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CreateUpdateCurrencyDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<CurrencyDto> FindByNameAndSymbolAsync(string name, string symbol)
    {
        return await RequestAsync<CurrencyDto>(nameof(FindByNameAndSymbolAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name },
            { typeof(string), symbol }
        });
    }

    public virtual async Task<List<CurrencyDto>> GetAllAsync()
    {
        return await RequestAsync<List<CurrencyDto>>(nameof(GetAllAsync));
    }
}
